// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  files         File[]
  usedStorage   Int       @default(0) // Used storage in bytes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sharedByMe   SharedItem[] @relation("SharedByUser")
  sharedWithMe SharedItem[] @relation("SharedWithUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  parentId  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  children  Folder[] @relation("FolderToFolder")
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRoot    Boolean  @default(false)
  isStarred Boolean  @default(false)
  isTrash   Boolean  @default(false)

  sharedWith SharedItem[]

  @@unique([name, parentId, userId])
  @@index([userId])
  @@index([parentId])
}

model File {
  id           String   @id @default(cuid())
  name         String
  type         String // MIME type
  size         Int // Size in bytes
  url          String // Cloudinary URL
  publicId     String // Cloudinary public ID
  thumbnailUrl String? // Thumbnail URL for images/PDFs
  folderId     String?
  userId       String
  folder       Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isStarred    Boolean  @default(false)
  isTrash      Boolean  @default(false)
  viewedAt     DateTime @default(now()) // Track when the file was last viewed for "Recent" feature

  sharedWith SharedItem[]

  @@index([userId])
  @@index([folderId])
}

model SharedItem {
  id              String    @id @default(cuid())
  fileId          String?
  folderId        String?
  sharedByUserId  String
  sharedWithEmail String
  permission      String // "view", "edit", etc.
  created         Boolean   @default(false) // If the share invitation has been accepted
  token           String?   @unique // For invitation link
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  file           File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  folder         Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  sharedByUser   User    @relation("SharedByUser", fields: [sharedByUserId], references: [id], onDelete: Cascade)
  sharedWithUser User?   @relation("SharedWithUser", fields: [sharedWithEmail], references: [email])

  @@index([fileId])
  @@index([folderId])
  @@index([sharedByUserId])
  @@index([sharedWithEmail])
}
